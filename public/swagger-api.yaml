swagger: '2.0'
info:
  version: 0.0.1
  title: DataMiningCloud Repository Service
  description: An API specification of DMC Repository based on swagger-2.0 specification
  contact:
    name: Aid
    email: aid666@gmail.com
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
basePath: /repo
schemes:
  - https
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
paths:

  /svcs:
    get:
      tags:
      - svcs
      parameters:
      - name: tags
        in: query
        description: tags to filter by
        required: false
        type: array
        items:
          type: string
        collectionFormat: csv
      - name: name
        in: query
        description: "DMService's type to filter by"
        required: false
        type: string
      - name: type
        in: query
        description: "DMService's type to filter by"
        required: false
        type: string
      - name: domain
        in: query
        description: "DMService's domain to filter by"
        required: false
        type: string
      - name: locale
        in: query
        description: "DMService's locale to filter by"
        required: false
        type: string
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        type: integer
        format: int32
      - name: start
        in: query
        description: start index of response entities list
        required: false
        type: integer
        format: int32
      - name: orderby
        in: query
        description: the order factor of the list.
        required: false
        type: string
      responses:
        200:
          description: DMService Metadata List
          schema:
            type: array
            items:
              $ref: '#/definitions/DMSvcMetadata'
    post:
      tags:
      - svcs
      description: "Create a new DM Service"
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/DMSvcMetadata"
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMSvcMetadata'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /svcs/{svcKey}:
    get:
      tags:
      - svcs
      summary: Get metadata of DM Service
      description: Return the medata of DM Service based on the svcKey
      parameters:
      - in: path
        name: svcKey
        description: "The generated key of a DMService"
        type: string
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMSvcMetadata'
    put:
      tags:
      - svcs
      summary: Update metadata of DM Service
      description: Update the medata of DM Service based on the svcKey
      parameters:
      - in: path
        name: svcKey
        description: "The generated key of a DMService"
        type: string
      - in: body
        name: body
        description: "The new DMService"
        schema:
          $ref: "#/definitions/DMSvcMetadata"
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMSvcMetadata'
    delete:
      tags:
      - svcs
      summary: Remove the whole DM Service
      description: Remove the medata, archive, processers, input and outpu, not including related model.
      parameters:
      - in: path
        name: svcKey
        type: string
      responses:
        200:
          description: OK

  /svcs/{svcKey}/processers:
    get:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Processer'
    put:
      tags:
      - svcs
      description: If this Service has been build already, use that deployed ProcessFlow to handle the data. Otherwise an ad_hoc execute will be run.
      parameters:
      - in: path
        name: svcKey
        description: "The generated key of a DMService"
        type: string
      - in: body
        name: body
        schema:
          type: array
          items:
            $ref: "#/definitions/Processer"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Processer'

  /svcs/{svcKey}/input:
    get:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DMInput'
    put:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      - in: body
        name: body
        schema:
          $ref: "#/definitions/DMInput"
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMInput'

  /svcs/{svcKey}/output:
    get:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DMOutput'
    put:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      - in: body
        name: body
        schema:
          $ref: "#/definitions/DMOutput"
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMOutput'

  /svcs/{svcKey}/build:
    get:
      tags:
      - svcs
      parameters:
      - in: path
        name: svcKey
        type: string
      responses:
        "200":
            description: OK
            schema:
              $ref: '#/definitions/ServiceFlow'

  /models:
    get:
      tags:
      - model
      parameters:
      - name: tags
        in: query
        description: tags to filter by
        required: false
        type: array
        items:
          type: string
        collectionFormat: csv
      - name: name
        in: query
        description: "Model's name to filter by"
        required: false
        type: string
      - name: type
        in: query
        description: "Model's type to filter by"
        required: false
        type: string
      - name: domain
        in: query
        description: "Model's domain to filter by"
        required: false
        type: string
      - name: locale
        in: query
        description: "Model's locale to filter by"
        required: false
        type: string
      - name: trainerType
        in: query
        description: "Model's trainer type to filter by"
        required: false
        type: string
      - name: referenceCountLowLimit
        in: query
        description: The minium reference count to filter by
        type: integer
        format: int32
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        type: integer
        format: int32
      - name: start
        in: query
        description: start index of response entities list
        required: false
        type: integer
        format: int32
      - name: orderby
        in: query
        description: the order factor of the list.
        required: false
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelMetadata'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
      - model
      description: "Create a new DM Processer Model"
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/ModelBuildRequest"
      responses:
        201:
          description: OK
          schema:
             $ref: '#/definitions/ModelMetadata'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /models/{modelKey}:
    get:
      tags:
      - model
      summary: Get metadata of DM Service
      description: Return the medata of model based on the svcKey
      parameters:
      - in: path
        name: modelKey
        description: "The generated key of a Processer model"
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ModelMetadata'
    put:
      tags:
      - model
      parameters:
      - in: path
        name: modelKey
        description: "The generated key of a Processer model"
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ModelMetadata'
      responses:
        201:
          description: OK
          schema:
              $ref: '#/definitions/ModelMetadata'
    delete:
      tags:
      - model
      parameters:
      - in: path
        name: modelKey
        type: string
      responses:
        204:
          description: OK

  /models/{modelKey}/data:
    get:
      tags:
      - model
      summary: Get data of DM Model
      parameters:
      - in: path
        name: modelKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ModelData'
    put:
      tags:
      - model
      summary: Get data of DM Model
      parameters:
      - in: path
        name: modelKey
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ModelData'
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/ModelData'

  /models/{modelKey}/build:
    get:
      tags:
      - model
      parameters:
      - in: path
        name: modelKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ModelBuildRequest"

  /models/{modelKey}/updates:
    get:
      tags:
      - model
      description: Return the build of the trainer's build.
      parameters:
      - in: path
        name: modelKey
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TrainerBuildMetadata'
    post:
      tags:
      - model
      description: update the model as an updatable model
      parameters:
      - in: path
        name: modelKey
        description: "The generated key of a Processer model build"
        type: string
      - in: body
        name: body
        description: Training set
        schema:
          $ref: '#/definitions/ModelBuildRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TrainerBuildMetadata'

  /models/{modelKey}/updates/{updateKey}:
    get:
      tags:
      - model
      description: Return the build of the trainer's build.
      parameters:
      - in: path
        name: modelKey
        type: string
      - in: path
        name: updateKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TrainerBuildMetadata'

  /trainers:
    get:
      tags:
      - trainer
      parameters:
      - name: tags
        in: query
        description: tags to filter by
        required: false
        type: array
        items:
          type: string
        collectionFormat: csv
      - name: name
        in: query
        description: "DMService's type to filter by"
        required: false
        type: string
      - name: type
        in: query
        description: "DMService's type to filter by"
        required: false
        type: string
      - name: domain
        in: query
        description: "DMService's domain to filter by"
        required: false
        type: string
      - name: locale
        in: query
        description: "DMService's locale to filter by"
        required: false
        type: string
      - name: limit
        in: query
        description: maximum number of results to return
        required: false
        type: integer
        format: int32
      - name: start
        in: query
        description: start index of response entities list
        required: false
        type: integer
        format: int32
      - name: orderby
        in: query
        description: the order factor of the list.
        required: false
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
             $ref: '#/definitions/TrainerMetadata'
    post:
      tags:
      - trainer
      parameters:
      - in: body
        name: body
        schema:
          $ref: "#/definitions/TrainerMetadata"
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/TrainerMetadata'

  /trainers/{trainerKey}:
    get:
      tags:
      - trainer
      summary: Get metadata of DM Model Trainer
      description: Return the medata of DM Trainer by the trainer key
      parameters:
      - in: path
        name: trainerKey
        type: string
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/TrainerMetadata'
    put:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      - in: body
        name: body
        description: "The new DMService"
        schema:
          $ref: "#/definitions/TrainerMetadata"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TrainerMetadata'
    delete:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      responses:
        204:
          description: OK

  /trainers/{trainerKey}/processers:
    get:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Processer'
    put:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      - in: body
        name: body
        schema:
          type: array
          items:
            $ref: '#/definitions/Processer'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Processer'

  /trainers/{trainerKey}/input:
    get:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DMInput'
    put:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      - in: body
        name: body
        schema:
          $ref: "#/definitions/DMInput"
      responses:
        200:
          description: OK
          schema:
              $ref: '#/definitions/DMInput'

  /trainers/{trainerKey}/build:
    get:
      tags:
      - trainer
      parameters:
      - in: path
        name: trainerKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TrainerFlow'

  #Archives services.
  /archives/svcs:
    get:
      tags:
      - archive
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceArchiveMetadata'
    post:
      tags:
      - archive
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ServiceArchive'
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/ServiceArchiveMetadata'

  /archives/svcs/{archiveKey}:
    get:
      tags:
      - archive
      parameters:
      - in: path
        name: archiveKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceArchive'
    delete:
      tags:
      - archive
      parameters:
      - in: path
        name: archiveKey
        type: string
      responses:
        204:
          description: OK

  /archives/model:
    get:
      tags:
      - archive
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelArchiveMetadata'
    post:
      tags:
      - archive
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ModelArchive'
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/ModelArchiveMetadata'

  /archives/model/{archiveKey}:
    get:
      tags:
      - archive
      parameters:
      - in: path
        name: archiveKey
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ModelArchive'
    delete:
      tags:
      - archive
      parameters:
        - in: path
          name: archiveKey
          type: string
      responses:
        204:
          description: OK

  /archives/trainer:
    get:
      tags:
      - archive
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TrainerArchiveMetadata'
    post:
      tags:
      - archive
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/TrainerArchive'
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/TrainerArchiveMetadata'

  /archives/trainer/{archiveKey}:
    get:
      tags:
      - archive
      parameters:
        - in: path
          name: archiveKey
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TrainerArchive'
    delete:
      tags:
      - archive
      parameters:
        - in: path
          name: archiveKey
          type: string
      responses:
        204:
          description: OK

definitions:
  Domain:
    properties:
      name:
        type: string
      date:
        description: The domain in differnent date may different, think about the change of computer brand from 1995 to 2015 .
        type: string
      parentDomain:
        $ref: '#/definitions/Domain'

  DMData:
    properties:
      key:
        type: string
      data:
        type: array
        items:
         $ref: '#/definitions/ColumnData'

  ColumnData:
    properties:
      attribute:
        $ref: '#/definitions/Attribute'
      data:
        type: array
        items:
          type: string

  DataInfor:
    properties:
      name:
        type: string
      domain:
        $ref: '#/definitions/Domain'

  Attribute:
    properties:
      name:
        type: string
      type:
        type: string
      format:
        type: string
      dataInfor:
        $ref: '#/definitions/DataInfor'

  DMInput:
    properties:
      attributes:
        type: array
        items:
          $ref: '#/definitions/Attribute'

  DMOutput:
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          $ref: '#/definitions/Attribute'

  DMSvcMetadata:
    required:
      - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  ProcesserAlgorithm:
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      catalog:
        description: The catelog path of the trainer, classifier.decisionTree.id3
        type: string

  Processer:
    properties:
      modelRef:
        $ref: '#/definitions/Reference'
      algrithm:
        $ref: '#/definitions/ProcesserAlgorithm'

  Reference:
    properties:
      refResource:
        type: string
      refKey:
        type: string
      refType:
        type: string
      accessCode:
        type: string

  ServiceArchiveMetadata:
    required:
    - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  ServiceArchive:
    properties:
      metadata:
        $ref: '#/definitions/ServiceArchiveMetadata'
      content:
        type: string

  ServiceFlow:
    properties:
      key:
        type: string

  ModelMetadata:
    required:
    - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  ModelBuildRequest:
    properties:
      metadata:
        $ref: '#/definitions/ModelMetadata'
      trainSet:
        $ref: '#/definitions/DMData'
      trainer:
        $ref: '#/definitions/Reference'

  ModelData:
    properties:
      name:
        type: string
      data:
        $ref: '#/definitions/DMData'

  ModelArchiveMetadata:
    required:
      - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  ModelArchive:
    properties:
      metadata:
        $ref: '#/definitions/ModelArchiveMetadata'
      content:
        type: string

  TrainerMetadata:
    required:
      - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      catalog:
        description: The catelog path of the trainer, classifier.decisionTree.id3
        type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  TrainerBuildMetadata:
    properties:
      key:
        type: string

  TrainerArchiveMetadata:
    required:
      - key
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      catalog:
        description: The catelog path of the trainer, classifier.decisionTree.id3
        type: string
      domain:
        $ref: '#/definitions/Domain'
      type:
        type: string
      isPublic:
        type: boolean
      owner:
        type: string

  TrainerArchive:
    properties:
      metadata:
        $ref: '#/definitions/TrainerArchiveMetadata'
      content:
        type: string

  TrainerFlow:
    properties:
      key:
        type: string
      status:
        type: string

  errorModel:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
